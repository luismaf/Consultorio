-- Script was generated by Devart dbForge Studio for MySQL, Version 5.0.67.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 11/12/2012 06:06:16 p.m.
-- Server version: 5.5.24-log
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Definition for database consultorio
--
DROP DATABASE IF EXISTS consultorio;
CREATE DATABASE IF NOT EXISTS consultorio
	CHARACTER SET latin1
	COLLATE latin1_swedish_ci;

-- 
-- Set default database
--
USE consultorio;

--
-- Definition for table diagnostico
--
CREATE TABLE IF NOT EXISTS diagnostico (
  id_diagnostico INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(100) NOT NULL,
  PRIMARY KEY (id_diagnostico)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table medicamento
--
CREATE TABLE IF NOT EXISTS medicamento (
  id_medicamento INT(11) UNSIGNED NOT NULL,
  nombre VARCHAR(255) NOT NULL,
  cantidad INT(11) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (id_medicamento)
)
ENGINE = INNODB
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table practica
--
CREATE TABLE IF NOT EXISTS practica (
  id_practica INT(11) UNSIGNED NOT NULL,
  nombre VARCHAR(255) NOT NULL,
  PRIMARY KEY (id_practica)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table obrasocial
--
CREATE TABLE IF NOT EXISTS obrasocial (
  id_obrasocial INT(11) UNSIGNED NOT NULL,
  nombre VARCHAR(255) NOT NULL,
  estado TINYINT(4) UNSIGNED NOT NULL DEFAULT 1 COMMENT '0 deshabilitado, 1 habilitado',
  PRIMARY KEY (id_obrasocial)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table paciente
--
CREATE TABLE IF NOT EXISTS paciente (
  id_paciente INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(255) NOT NULL,
  apellido VARCHAR(255) NOT NULL,
  tipo_doc TINYINT(4) UNSIGNED DEFAULT NULL,
  numero_doc INT(11) UNSIGNED DEFAULT NULL,
  fecha_nac DATE DEFAULT NULL,
  grupo_sanguineo TINYINT(4) UNSIGNED DEFAULT NULL,
  factor_sanguineo TINYINT(4) UNSIGNED DEFAULT NULL,
  domicilio VARCHAR(255) DEFAULT NULL,
  telefono VARCHAR(100) DEFAULT NULL,
  celular VARCHAR(100) DEFAULT NULL,
  email VARCHAR(100) DEFAULT NULL,
  problemas VARCHAR(255) DEFAULT NULL,
  notas TEXT DEFAULT NULL,
  estado TINYINT(4) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'esstado=0 ==> eliminado |  estado=1 ==> no eliminado',
  PRIMARY KEY (id_paciente)
)
ENGINE = INNODB
AUTO_INCREMENT = 2
AVG_ROW_LENGTH = 16384
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table receta
--
CREATE TABLE IF NOT EXISTS receta (
  id_paciente INT(11) UNSIGNED NOT NULL,
  id_consulta INT(11) UNSIGNED NOT NULL,
  id_medicamento INT(11) UNSIGNED NOT NULL,
  cantidad INT(11) DEFAULT NULL,
  descripcion VARCHAR(255) DEFAULT NULL,
  frecuencia INT(11) UNSIGNED DEFAULT NULL,
  unidad_frecuencia ENUM('minuto(s)','hora(s)','dia(s)','semana(s)') DEFAULT NULL,
  PRIMARY KEY (id_paciente, id_consulta, id_medicamento)
)
ENGINE = INNODB
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table usuario
--
CREATE TABLE IF NOT EXISTS usuario (
  usuario VARCHAR(64) NOT NULL,
  `password` VARCHAR(64) NOT NULL,
  nombre VARCHAR(255) DEFAULT NULL,
  recordatorio_password VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (usuario)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table afiliado
--
CREATE TABLE IF NOT EXISTS afiliado (
  id_obrasocial INT(11) UNSIGNED NOT NULL,
  id_paciente INT(11) UNSIGNED NOT NULL,
  nro_afiliado INT(11) UNSIGNED NOT NULL,
  estado TINYINT(4) UNSIGNED NOT NULL DEFAULT 1 COMMENT '0 deshabilitado, 1 habilitado',
  PRIMARY KEY (id_obrasocial, id_paciente),
  UNIQUE INDEX id_paciente (id_paciente, id_obrasocial),
  CONSTRAINT FK_afiliado_obrasocial_id_obrasocial FOREIGN KEY (id_obrasocial)
    REFERENCES obrasocial(id_obrasocial) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_afiliado_paciente_id_paciente FOREIGN KEY (id_paciente)
    REFERENCES paciente(id_paciente) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table consulta
--
CREATE TABLE IF NOT EXISTS consulta (
  id_paciente INT(11) UNSIGNED NOT NULL,
  id_consulta INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  id_obrasocial INT(11) UNSIGNED DEFAULT NULL,
  fecha DATETIME NOT NULL,
  id_practica INT(11) UNSIGNED DEFAULT NULL,
  id_diagnostico INT(11) UNSIGNED DEFAULT NULL,
  detalle_practica VARCHAR(255) DEFAULT NULL,
  detalle_diagnostico VARCHAR(255) DEFAULT NULL,
  detalle_consulta TEXT DEFAULT NULL,
  estado TINYINT(4) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'esstado=0 ==> consulta eliminada |  estado=1 ==> consulta no eliminada',
  PRIMARY KEY (id_consulta, id_paciente),
  INDEX FK_consulta (id_paciente, id_obrasocial),
  INDEX FK_consulta_diagnostico_id_diagnostico (id_diagnostico),
  INDEX FK_consulta_practica_id_practica (id_practica),
  CONSTRAINT FK_consulta FOREIGN KEY (id_paciente, id_obrasocial)
    REFERENCES afiliado(id_paciente, id_obrasocial) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_consulta_diagnostico_id_diagnostico FOREIGN KEY (id_diagnostico)
    REFERENCES diagnostico(id_diagnostico) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_consulta_practica_id_practica FOREIGN KEY (id_practica)
    REFERENCES practica(id_practica) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_consulta_paciente_id_paciente FOREIGN KEY (id_paciente)
    REFERENCES paciente(id_paciente) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AUTO_INCREMENT = 2
AVG_ROW_LENGTH = 16384
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Definition for procedure afiliado_actualizar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE afiliado_actualizar(
	_id_obrasocial int(11) unsigned,
	_id_paciente int(11) unsigned,
	_nro_afiliado int(11) unsigned,
	_estado tinyint(4) unsigned)
BEGIN
	INSERT INTO afiliado(
		id_obrasocial,
		id_paciente,
		nro_afiliado,
		estado)
	VALUES (
		_id_obrasocial,
		_id_paciente,
		_nro_afiliado,
		_estado)
	ON DUPLICATE KEY UPDATE
		id_obrasocial = _id_obrasocial,
		id_paciente = _id_paciente,
		nro_afiliado = _nro_afiliado,
		estado = _estado;
END
$$

--
-- Definition for procedure afiliado_borrar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE afiliado_borrar(
	_id_paciente int(11) unsigned,
	_id_obrasocial int(11) unsigned)
BEGIN
	UPDATE afiliado
	SET estado = 0
	 WHERE
		id_paciente = _id_paciente AND 
		id_obrasocial = _id_obrasocial;
END
$$

--
-- Definition for procedure afiliado_listar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE afiliado_listar(
	_id_paciente int(11) unsigned)
BEGIN
	SELECT
		id_obrasocial,
		nro_afiliado,
		estado -- permite mostar en color naranja las obras sociales anteriores/deshabilitadas
	FROM afiliado
	WHERE id_paciente = _id_paciente;
END
$$

--
-- Definition for procedure consulta_actualizar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE consulta_actualizar(
	_id_paciente int(11) unsigned,
	_id_consulta int(11) unsigned,
	_id_obrasocial int(11) unsigned,
	_fecha datetime,
	_id_practica int(11) unsigned,
	_id_diagnostico int(11) unsigned,
	_detalle_practica varchar(255),
	_detalle_diagnostico varchar(255),
	_detalle_consulta text)
BEGIN
	INSERT INTO consulta(
		id_paciente,
		id_consulta,
		id_obrasocial,
		fecha,
		id_practica,
		id_diagnostico,
		detalle_practica,
		detalle_diagnostico,
		detalle_consulta,
		estado)
	VALUES (
		_id_paciente, -- si es nulo, inserta.. sino va a dar duplicado, y va a actualizarlo
		_id_consulta,
		_id_obrasocial,
		_fecha,
		_id_practica,
		_id_diagnostico,
		_detalle_practica,
		_detalle_diagnostico,
		_detalle_consulta,
		1) -- estado=1 ==> no eliminada
	ON DUPLICATE KEY UPDATE
		-- id_paciente = _id_paciente,
		id_consulta = _id_consulta,
		id_obrasocial = _id_obrasocial,
		fecha = _fecha,
		id_practica = _id_practica,
		id_diagnostico = _id_diagnostico,
		detalle_practica = _detalle_practica,
		detalle_diagnostico = _detalle_diagnostico,
		detalle_consulta = _detalle_consulta;
END
$$

--
-- Definition for procedure consulta_borrar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE consulta_borrar(
	_id_consulta int(11) unsigned,
	_id_paciente int(11) unsigned)
BEGIN
	UPDATE consulta
		SET estado = 0
		WHERE
			id_consulta = _id_consulta AND 
			id_paciente = _id_paciente;
END
$$

--
-- Definition for procedure consulta_listar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE consulta_listar(_id_paciente INT(11) UNSIGNED)
BEGIN
  SELECT id_consulta
       , fecha
       , id_practica
       , detalle_practica
       , id_diagnostico
       , detalle_diagnostico
       , detalle_consulta
  FROM
    consulta
  WHERE
    id_paciente = _id_paciente;
END
$$

--
-- Definition for procedure consulta_recuperar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE consulta_recuperar(
	_id_paciente int(11) unsigned,
	_id_consulta int(11) unsigned)
BEGIN
	SELECT -- c.id_consulta,
	       c.fecha,
	       c.id_practica,
		   m.nombre,
		   c.detalle_practica,
	       c.id_diagnostico,
		   d.nombre,
	       c.detalle_diagnostico,
	       c.detalle_consulta
	  FROM consulta c
	  INNER JOIN practica m
		ON consulta.id_practica= practica.id_practica
	  INNER JOIN diagnostico d
		ON consulta.id_diagnostico=diagnostico.id_diagnostico
	  WHERE
		id_consulta = _id_consulta AND 
		id_paciente = _id_paciente;
END
$$

--
-- Definition for procedure diagnostico_listar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE diagnostico_listar()
BEGIN
  SELECT id_diagnostico
       , nombre
  FROM
    diagnostico;
END
$$

--
-- Definition for procedure practica_listar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE practica_listar()
BEGIN
  SELECT id_practica
       , nombre
  FROM
    practica;
END
$$

--
-- Definition for procedure obrasocial_actualizar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE obrasocial_actualizar(_id_obrasocial INT(11) UNSIGNED,
                                       _nombre        VARCHAR(255)
                                       )
BEGIN
  INSERT INTO obrasocial (
    id_obrasocial, nombre, estado) VALUES (
    _id_obrasocial, _nombre, _estado)
  ON DUPLICATE KEY UPDATE
    id_obrasocial = _id_obrasocial,
    nombre = _nombre;
END
$$

--
-- Definition for procedure obrasocial_borrar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE obrasocial_borrar(_id_obrasocial INT(11) UNSIGNED)
BEGIN
  UPDATE obrasocial
  SET
    estado = 0
  WHERE
    id_obrasocial = _id_obrasocial;
END
$$

--
-- Definition for procedure obrasocial_listar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE obrasocial_listar()
BEGIN
  SELECT id_obrasocial
       , nombre
       , estado
  FROM
    obrasocial;
END
$$

--
-- Definition for procedure paciente_actualizar
--
dROP PROCEDURE paciente_actualizar
CREATE DEFINER = 'root'@'localhost'
PROCEDURE paciente_actualizar( INOUT _id_paciente      INT(11) UNSIGNED,
                                     _nombre          VARCHAR(255),
									 _apellido           VARCHAR(255),
                                     _tipo_doc         tinyint(4),
                                     _numero_doc       INT(11) UNSIGNED,
                                     _fecha_nac        DATE,
                                     _grupo_sanguineo  tinyint(4),
                                     _factor_sanguineo tinyint(4),
                                     _domicilio        VARCHAR(255),
                                     _telefono         VARCHAR(100),
                                     _celular          VARCHAR(100),
                                     _email            VARCHAR(100),
                                     _problemas        VARCHAR(255),
                                     _notas            TEXT
                                     )
BEGIN
  INSERT INTO paciente (
    id_paciente, nombre, apellido, tipo_doc, numero_doc, fecha_nac, grupo_sanguineo, factor_sanguineo, domicilio, telefono, celular, email, problemas, notas) VALUES (
    _id_paciente, _nombre, _apellido, _tipo_doc, _numero_doc, _fecha_nac, _grupo_sanguineo, _factor_sanguineo, _domicilio, _telefono, _celular, _email, _problemas, _notas)
  ON DUPLICATE KEY UPDATE
    id_paciente = _id_paciente,
    nombre = _nombre,
	apellido = _apellido,
    tipo_doc = _tipo_doc,
    numero_doc = _numero_doc,
    fecha_nac = _fecha_nac,
    grupo_sanguineo = _grupo_sanguineo,
    factor_sanguineo = _factor_sanguineo,
    domicilio = _domicilio,
    telefono = _telefono,
    celular = _celular,
    email = _email,
    problemas = _problemas,
    notas = _notas;
END
$$

--
-- Definition for procedure paciente_borrar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE paciente_borrar(_id_paciente INT(11) UNSIGNED)
BEGIN
  UPDATE paciente
  SET
    estado = 0
  WHERE
    id_paciente = _id_paciente;
END
$$

--
-- Definition for procedure paciente_listar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE paciente_listar()
BEGIN
	SELECT id_paciente,
		nombre,
		apellido,
		tipo_doc,
		numero_doc,
		fecha_nac,
		grupo_sanguineo,
		factor_sanguineo,
		domicilio,
		telefono,
		celular,
		email,
		problemas,
		notas
	  FROM paciente
	  WHERE
		estado=1; -- omitir pacientes eliminados
	END
$$

--
-- Definition for procedure usuario_validar
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE usuario_validar(IN  _usuario  VARCHAR(64),
                                 IN  _password VARCHAR(64),
                                 OUT _nombre   VARCHAR(255)
                                 )
BEGIN
  SET _nombre = NULL;
  -- IF NOT EXISTS (
  SELECT nombre
  INTO
    _nombre
  FROM
    usuario
  WHERE
    usuario = _usuario
    AND
    password = _password
  LIMIT
    1;
-- ) THEN 
END
$$

DELIMITER ;

-- 
-- Dumping data for table diagnostico
--
INSERT INTO diagnostico VALUES 
  (1, 'Cuadro Gripal'),
  (2, 'Hipotensión '),
  (3, 'Hipertensión');

-- 
-- Dumping data for table medicamento
--
-- Table consultorio.medicamento does not contain any data (it is empty)

-- 
-- Dumping data for table practica
--
INSERT INTO practica VALUES 
  (1, 'Gripe'),
  (2, 'Tos'),
  (3, 'Mareos');

-- 
-- Dumping data for table obrasocial
--
INSERT INTO obrasocial VALUES 
  (1, 'OSDE', 1),
  (2, 'OSPAC', 1),
  (3, 'IAPOS', 1);

-- 
-- Dumping data for table paciente
--
INSERT INTO paciente VALUES 
  (1, 'nom', 'ap', 1, 2323232, '2007-12-12', 1, 1, 'sarasa 132', '23232', '23232', 'test@test', 'problemas', 'sdfasdf', 1);

-- 
-- Dumping data for table receta
--
-- Table consultorio.receta does not contain any data (it is empty)

-- 
-- Dumping data for table usuario
--
INSERT INTO usuario VALUES 
  ('admin', 'admin', 'Administrador', 'idem que el usuario'),
  ('net', 'net', 'Profesor', 'el mismo que el usuario');

-- 
-- Dumping data for table afiliado
--
INSERT INTO afiliado VALUES 
  (1, 1, 123456, 1),
  (2, 1, 1001, 1);

-- 
-- Dumping data for table consulta
--
INSERT INTO consulta VALUES 
  (1, 1, 1, '2012-12-10 18:01:32', 1, 1, 'Detalle practica', 'det diagnostico', 'detalle consulta', 1);

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;